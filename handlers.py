import asyncio
from contextlib import suppress
from aiogram import types
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.dispatcher.filters import Text, Command, BoundFilter
from aiogram.types import ReplyKeyboardMarkup
from aiogram.utils.exceptions import MessageNotModified, CantParseEntities

from LittlebitWords import rand
from config import get_admins, PATH_DATABASE
from inline import mail_confirm_inl
from main import bot,dp,chat_id
from aiogram.dispatcher import  FSMContext
from misc_function import open_profile_user
from sql import *


global loose
global win
global podz
podz = -2
win = 5
loose = -3
HANGMAN = (
    """
     ------
     |    |
     |
     |
     |
     |
     |
    ----------
    """,
    """
     ------
     |    |
     |    üòá
     |
     |
     |
     |
    ----------
    """,
    """
     ------
     |    |
     |    üôÅ
     |    |
     | 
     |   
     |    
    ----------
    """,
    """
     ------
     |    |
     |    ü•∫
     |   /|
     |   
     |   
     |   
    ----------
    """,
    """
     ------
     |    |
     |    üò´
     |   /|\\
     |   
     |   
     |     
    ----------
    """,
    """
     ------
     |    |
     |    üò©
     |   /|\\
     |   /
     |   
     |    
    ----------
    """,
    """
     ------
     |    |
     |    ‚ò†
     |   /|\\
     |   / \\
     |   
     |   
    ----------
    """
)

used=[]
global wrong
wrong = 0
db=PATH_DATABASE
max_wrong = len(HANGMAN) - 1
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞

class IsAdmin(BoundFilter):
    async def check(self, message: types.Message):
        if message.from_user.id in get_admins():
            return True
        else:
            return False

# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def menu_frep(user_id):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üóí –ü—Ä–∞–≤–∏–ª–∞", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìä –†–µ–π—Ç–∏–Ω–≥")
    keyboard.row("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞")

    if user_id in get_admins():
        keyboard.row("üìÑ–ë–î","üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞","üì¢ –†–∞—Å—Å—ã–ª–∫–∞")


    return keyboard



@dp.message_handler(text=['–∏–≥—Ä–∞', '/start','–∏–≥—Ä–∞—Ç—å','–≤–∏—Å–µ–ª–∏—Ü–∞','/game'], state="*")
async def main_start(message: Message, state: FSMContext):
    await state.finish()

    await message.answer("üî∏ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n"
                         "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                         "‚ñ∂ –í–≤–µ–¥–∏—Ç–µ /start",
                         reply_markup=menu_frep(message.from_user.id))

async def send_hello(dp):
   await bot.send_message(chat_id=chat_id,text='–ê—Ä–±–∞–π—Ç–µ–Ω')


@dp.message_handler(text="üóí –ü—Ä–∞–≤–∏–ª–∞", state="*")
async def new_game (message: Message, state: FSMContext):
    await state.finish()
    await message.answer("–í–∏—Å–µ–ª–∏—Ü–∞ - —Å—Ç–∞—Ä–∞—è –¥–æ–±—Ä–∞—è –∏–≥—Ä—É—à–∫–∞. –ó–∞–≥–∞–¥—ã–≤–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ, –∏ –í—ã –±—É–∫–≤–∞ –∑–∞ –±—É–∫–≤–æ–π –ø—ã—Ç–∞–µ—Ç–µ—Å—å –µ–≥–æ —É–≥–∞–¥–∞—Ç—å. –ù–∞ —ç—Ç–æ –¥–∞–µ—Ç—Å—è 7 –ø–æ–ø—ã—Ç–æ–∫.\n"
                         "‚ñ∂–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è:\n"
                         "‚úÖ–ü–æ–±–µ–¥–∞ +5 –æ—á–∫–æ–≤\n"
                         "üî•–°–ª–æ–≤–æ —Å–æc—Ç–æ—è—â–∏–µ –∏–∑ 10+–±—É–∫–≤ +5 –æ—á–∫–æ–≤\n"
                         "‚ùå–ü—Ä–æ–∏–≥—Ä—ã—à -3 –æ—á–∫–∞\n"
                         "‚≠ï–í–∑—è—Ç–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ -2 –æ—á–∫–∞ ")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ë–î
@dp.message_handler(IsAdmin(), text=['üìÑ–ë–î'], state="*")
async def admin_database(message: Message, state: FSMContext):
    await state.finish()

    with open(PATH_DATABASE, "rb") as document:
        await message.answer_document(document,
                                      caption=f"<b>üì¶ BACKUP\n"
                                              f"üï∞ <code>{get_date()}</code></b>")



@dp.message_handler(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", state="*")
async def new_game (message: Message, state: FSMContext):
    await state.finish()
    await message.answer(open_profile_user(message.from_user.id))


@dp.message_handler(text="üìä –†–µ–π—Ç–∏–Ω–≥", state="*")
async def new_game (message: Message, state: FSMContext):
    await state.finish()
    top=[]
    sqlite_connection = sqlite3.connect(PATH_DATABASE)
    cursor = sqlite_connection.cursor()

    sqlite_select_query = """SELECT * from storage_users ORDER BY user_balance DESC"""
    cursor.execute(sqlite_select_query)

    records = cursor.fetchmany(3)
    for row in records:
        top.append(row)

    cursor.close()

    #await message.answer(top[2][2])
    await message.answer(
                         f"ü•á–ò–º—è: {top[0][2]}          –ü–æ–±–µ–¥: {top[0][5]}       –û—á–∫–æ–≤: {top[0][4]}\n"
                         f"ü•à–ò–º—è: {top[1][2]}          –ü–æ–±–µ–¥: {top[1][5]}       –û—á–∫–æ–≤: {top[1][4]}\n"
                         f"ü•â–ò–º—è: {top[2][2]}          –ü–æ–±–µ–¥: {top[2][5]}       –û—á–∫–æ–≤: {top[2][4]}\n")

@dp.message_handler(text="üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞", state="*")
async def cmd_numbers(message: types.Message):
    get_user = get_userx(user_id=message.from_user.id)
    proverka=get_user['user_slovo']
    if proverka == None:

        wrong = 0
        used=[]
        dlina = "‚ûñ"
        slov,znach = rand()
        update_slovox(message.from_user.id,
                      user_used="–¢—ã –µ—â–µ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–æ–π")
        update_slovox(message.from_user.id,
                     user_dlina=len(slov)*dlina)
        update_slovox(message.from_user.id,
                     user_slovo=slov)
        update_slovox(message.from_user.id,
                      user_znach=znach)
        update_slovox(message.from_user.id,
                      user_wrong=wrong)
        #so_far=get_user['user_dlina']
        get_user = get_userx(user_id=message.from_user.id)
        #await update_num_text(message, used, wrong, so_far)

        await message.answer(f"–û—Ç–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: {get_user['user_dlina']}\n –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –±—É–∫–≤—ã: {used}\n {HANGMAN[wrong]}\n üî∏{get_user['user_used']} ", reply_markup=get_keyboard())
    else:
        used=[]
        wrong=get_user['user_wrong']
        await message.answer(f"–û—Ç–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: {get_user['user_dlina']}\n –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –±—É–∫–≤—ã: {used}\n {HANGMAN[wrong]}\n üî∏{get_user['user_used']} ", reply_markup=get_keyboard())




@dp.message_handler(IsAdmin(), text="üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", state="*")
async def admin_statistics(message: Message, state: FSMContext):
    await state.finish()
    top_all=[]
    sqlite_connection = sqlite3.connect(PATH_DATABASE)
    cursor = sqlite_connection.cursor()

    sqlite_select_query = """SELECT * from storage_users ORDER BY user_balance DESC"""
    cursor.execute(sqlite_select_query)

    records = cursor.fetchmany(1000)
    for row in records:
        top_all.append(row[2])
        top_all.append(row[4])

    cursor.close()

    await message.answer(top_all)


"""
###############################################################################–•–ï–ù–î–õ–ï–† –°–ù–ò–ó–£ –ù–ê –õ–Æ–ë–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ö–ò–î–ê–ï–¢ –í–ò–°–ï–õ–ò–¶–£
@dp.message_handler()
async def oshibka(message:types.Message):
    get_user = get_userx(user_id=message.from_user.id)
    osh=get_user['user_dlina']


    await message.answer(f"–û—Ç–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: {osh}\n –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –±—É–∫–≤—ã: {used}\n {HANGMAN[wrong]} ", reply_markup=get_keyboard())
"""


def get_keyboard():
    buttons = [
        types.InlineKeyboardButton(text="–ê", callback_data="num_1"),
        types.InlineKeyboardButton(text="–ë", callback_data="num_2"),
        types.InlineKeyboardButton(text="–í", callback_data="num_3"),
        types.InlineKeyboardButton(text="–ì", callback_data="num_4"),
        types.InlineKeyboardButton(text="–î", callback_data="num_5"),
        types.InlineKeyboardButton(text="–ï", callback_data="num_6"),
        types.InlineKeyboardButton(text="–Å", callback_data="num_7"),
        types.InlineKeyboardButton(text="–ñ", callback_data="num_8"),
        types.InlineKeyboardButton(text="–ó", callback_data="num_9"),
        types.InlineKeyboardButton(text="–ò", callback_data="num_10"),
        types.InlineKeyboardButton(text="–ô", callback_data="num_11"),
        types.InlineKeyboardButton(text="–ö", callback_data="num_12"),
        types.InlineKeyboardButton(text="–õ", callback_data="num_13"),
        types.InlineKeyboardButton(text="–ú", callback_data="num_14"),
        types.InlineKeyboardButton(text="–ù", callback_data="num_15"),
        types.InlineKeyboardButton(text="–û", callback_data="num_16"),
        types.InlineKeyboardButton(text="–ü", callback_data="num_17"),
        types.InlineKeyboardButton(text="–†", callback_data="num_18"),
        types.InlineKeyboardButton(text="–°", callback_data="num_19"),
        types.InlineKeyboardButton(text="–¢", callback_data="num_20"),
        types.InlineKeyboardButton(text="–£", callback_data="num_21"),
        types.InlineKeyboardButton(text="–§", callback_data="num_22"),
        types.InlineKeyboardButton(text="–•", callback_data="num_23"),
        types.InlineKeyboardButton(text="–¶", callback_data="num_24"),
        types.InlineKeyboardButton(text="–ß", callback_data="num_25"),
        types.InlineKeyboardButton(text="–®", callback_data="num_26"),
        types.InlineKeyboardButton(text="–©", callback_data="num_27"),
        types.InlineKeyboardButton(text="–™", callback_data="num_28"),
        types.InlineKeyboardButton(text="–´", callback_data="num_29"),
        types.InlineKeyboardButton(text="–¨", callback_data="num_30"),
        types.InlineKeyboardButton(text="–≠", callback_data="num_31"),
        types.InlineKeyboardButton(text="–Æ", callback_data="num_32"),
        types.InlineKeyboardButton(text="–Ø", callback_data="num_33"),

        types.InlineKeyboardButton(text="–ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="podskazka")

       # types.InlineKeyboardButton(text="üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞",callback_data="game")
    ]

    keyboard = types.InlineKeyboardMarkup(row_width=8)
    keyboard.add(*buttons)
    return keyboard

#–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –í–ò–°–ï–õ–ò–¶–´
async def update_num_text(message: types.Message, used: str ,wrong:int,so_far : str ,user_used:str):
    with suppress(MessageNotModified):
        get_user = get_userx(user_id=message.from_user.id)


        await message.answer(f"–û—Ç–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: {so_far}\n –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –±—É–∫–≤—ã: {used}\n {HANGMAN[wrong]}\n {user_used}üî∏", reply_markup=get_keyboard())



#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
@dp.callback_query_handler(text="num_1")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov=get_user['user_slovo']
    bykva_A = "–∞"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used=get_user['user_used']
    #so_far=so_far*dlina
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶Ô∏è –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                                    "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_2")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–±"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']

    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     userloose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           " ‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start   ")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_3")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–≤"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']

    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_4")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–≥"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']

    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_5")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–¥"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']

    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_6")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–µ"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']

    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")


        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)



@dp.callback_query_handler(text="num_7")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—ë"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']

    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_8")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–∂"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']

    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_9")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–∑"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']

    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong ,  so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)



@dp.callback_query_handler(text="num_10")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–∏"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']

    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                    "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")


        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)



@dp.callback_query_handler(text="num_11")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–π"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']

    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_12")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–∫"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']

    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)



@dp.callback_query_handler(text="num_13")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–ª"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    update_slovox(callback.from_user.id,
                  user_dlina=so_far)
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")


        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)



@dp.callback_query_handler(text="num_14")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–º"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_15")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–Ω"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_16")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–æ"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)



@dp.callback_query_handler(text="num_17")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "–ø"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)



@dp.callback_query_handler(text="num_18")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—Ä"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")


        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_19")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—Å"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_20")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—Ç"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")


        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_21")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—É"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)



@dp.callback_query_handler(text="num_22")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—Ñ"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")


        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_23")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—Ö"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)



@dp.callback_query_handler(text="num_24")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—Ü"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")


        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_25")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—á"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_26")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—à"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)




@dp.callback_query_handler(text="num_27")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—â"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)




@dp.callback_query_handler(text="num_28")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—ä"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong ,  so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)


@dp.callback_query_handler(text="num_29")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—ã"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)




@dp.callback_query_handler(text="num_30")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—å"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")


        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)



@dp.callback_query_handler(text="num_31")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—ç"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)



    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)



@dp.callback_query_handler(text="num_32")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—é"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong ,so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)
    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)




@dp.callback_query_handler(text="num_33")
async def send_bykva_A(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    slov = get_user['user_slovo']
    bykva_A = "—è"
    wrong=get_user['user_wrong']
    used = []
    new = ""
    so_far=get_user['user_dlina']
    update_slovox(callback.from_user.id,
                  user_dlina=so_far)
    user_used = get_user['user_used']
    while bykva_A in used:
        pass
    if bykva_A in slov:
        for i in range(len(slov)):  # –í —Ü–∏–∫–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –±—É–∫–≤—É –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            if bykva_A == slov[i]:
                new += bykva_A
            else:
                new += so_far[i]
        so_far = new
        update_slovox(callback.from_user.id,
                      user_dlina=so_far)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    else:
        used += bykva_A
        wrong = wrong + 1
        update_userx(callback.from_user.id,
                     user_wrong=get_user['user_wrong']+1)
        await update_num_text(callback.message, used , wrong , so_far,user_used)
    if wrong == max_wrong:
        await callback.message.answer(text="ü§Ø –¢–µ–±—è –ø–æ–≤–µ—Å–∏–ª–∏.\n"
                                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                                                     "üî∏ -3 –û—á–∫–∞ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                     f"‚ö°–°–ª–æ–≤–æ–º –±—ã–ª–æ - {get_user['user_slovo']}\n"
                                                     "‚ñ∂ –í–≤–µ–¥–∏—Ç–µ /start")
        update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+loose)
        update_userx(callback.from_user.id,
                     user_loose=get_user['user_loose']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)

    if slov == so_far:
        await callback.message.answer(text="ü•≥ –£—Ä–∞! –¢—ã —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å –≤–∏—Å–µ–ª–∏—Ü—ã.\n"
                                                    "üî∏ +5 –û—á–∫–æ–≤ –∫ —Ç–≤–æ–µ–º—É –†–µ–π—Ç–∏–Ω–≥—É\n"
                                                    "‚ñ∂ –°–∫–æ—Ä–µ–π –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
                                           "‚ô¶ –í–≤–µ–¥–∏—Ç–µ /start")

        if len(get_user['user_dlina']) >= 10 :
            update_userx(callback.from_user.id,
                         user_balance=get_user['user_balance']+10)

        else:
            update_userx(callback.from_user.id,
                     user_balance=get_user['user_balance']+win)

        update_userx(callback.from_user.id,
                     user_win=get_user['user_win']+1)
        update_userx(callback.from_user.id,
                     user_slovo=None)



@dp.callback_query_handler(text="podskazka")
async def send_podskazka(callback: types.CallbackQuery):
    get_user = get_userx(user_id=callback.from_user.id)
    await callback.message.answer(text=f"{get_user['user_znach']}\n"
                                               f"üî∏ -2 –û—á–∫–∞ —Ç–≤–æ–µ–≥–æ –†–µ–π—Ç–∏–Ω–≥–∞")
    slov=get_user['user_znach']
    update_userx(callback.from_user.id,
                 user_balance=get_user['user_balance']+podz)
    update_slovox(callback.from_user.id,
                 user_used=slov)

########################################################–†–ê–°–°–´–õ–ö–ê
@dp.message_handler(IsAdmin(), text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", state="*")
async def functions_mail(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_mail_text")
    await message.answer("<b>üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n"
                         "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É")

@dp.message_handler(IsAdmin(), state="here_mail_text")
async def functions_mail_get(message: Message, state: FSMContext):
    await state.update_data(here_mail_text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞.\n" + str(message.text))
    get_users = get_all_usersx()

    try:
        cache_msg = await message.answer(message.text)
        await cache_msg.delete()

        await state.set_state("here_mail_confirm")
        await message.answer(
            f"<b>üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å <code>{len(get_users)}</code> —é–∑–µ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n"
            f"{message.text}",
            reply_markup=mail_confirm_inl,
            disable_web_page_preview=True
        )
    except CantParseEntities:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É.")


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_mail", state="here_mail_confirm")
async def functions_mail_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]

    send_message = (await state.get_data())['here_mail_text']
    get_users = get_all_usersx()
    await state.finish()

    if get_action == "yes":
        await call.message.edit_text(f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (0/{len(get_users)})</b>")
        asyncio.create_task(functions_mail_make(send_message, call))
    else:
        await call.message.edit_text("<b>üì¢ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úÖ</b>")


# –°–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def functions_mail_make(message, call: CallbackQuery):
    receive_users, block_users, how_users = 0, 0, 0
    get_users = get_all_usersx()
    get_time = get_unix()

    for user in get_users:
        try:
            await bot.send_message(user['user_id'], message, disable_web_page_preview=True)
            receive_users += 1
        except:
            block_users += 1

        how_users += 1

        if how_users % 10 == 0:
            await call.message.edit_text(f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... ({how_users}/{len(get_users)})</b>")

        await asyncio.sleep(0.08)

    await call.message.edit_text(
        f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ <code>{get_unix() - get_time}—Å–µ–∫</code></b>\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(get_users)}</code>\n"
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{receive_users}</code>\n"
        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{block_users}</code>"
    )

